#!/usr/bin/env python3

import curses
try:
    import vk
except:
    raise NameError("Unable to load VK module. Is it installed? (pip3 install vk)")
from queue import Queue
from threading import Thread
from time import sleep
from signal import signal, SIGTERM, SIGINT

VERSION = '00 Rei'
APP_ID = 5586370
API_VERSION = '5.57'

DialogsToken, MessagesToken = 0, 1
Dialogs, Messages, RequestConveyor, DialogsTransfer, MessagesTransfer = (None,)*5

CMD_EXIT = ':q!'


class _dialogs:
    global RequestConveyor, DialogsTransfer
    active = True
    # Current page
    page = 0
    # Current position on page
    pos = 0
    # Every 'updateInterval' seconds ask for update
    updateInterval = 1
    # Response to request
    response = {}

    def __init__(self, stdscr):
        # Init window
        y, x = stdscr.getmaxyx()
        maxBoxHeight = 17
        self.y = y - 2 if y < maxBoxHeight else maxBoxHeight - 2
        # Messages window width is calculated relative to dialogs window width
        self.x = x // 4 - 2
        self.box = stdscr.subwin(self.y + 2, self.x + 2, 0, 0)
        self.window = self.box.derwin(self.y, self.x, 1, 1)
        curses.init_pair(1, curses.COLOR_RED, -1)
        self.BOLD_RED = curses.color_pair(1) | curses.A_BOLD

        # Init thread
        self.response = None
        self.updater = Thread(None, self.update, "Dialogs Update Thread")
        self.updater.daemon = True
        self.updater.start()

    def update(self):
        while True:
            # Offset for getting dialogs
            dialogsOffset = self.page * self.y
            # How much dialogs should be got
            dialogsToGet = self.y
            # Form request
            request = """
                        var dialogs = API.messages.getDialogs({
                            "count": """ + str(dialogsToGet) + """,
                            "offset": """ + str(dialogsOffset) + """,
                            "v": """ + API_VERSION + """});
                        var titles = dialogs.items@.message@.title;
                        var user_ids = dialogs.items@.message@.user_id;
                        var names = API.users.get({
                            "user_ids": user_ids,
                            "v": """ + API_VERSION + """});
                        var isConference = [];
                        var i = """ + str(dialogsToGet) + """;
                        while (i > 0) {
                            i = i - 1;
                            var name;
                            var j = 0;
                            if (titles[i] == " ... ") {
                                isConference.unshift(false);
                                var breakFlag = false;
                                while (j < names.length && !breakFlag) {
                                    if (user_ids[i] == names[j].id) {
                                        name = names[j].first_name + " " + names[j].last_name;
                                        breakFlag = true;
                                    }
                                    j = j + 1;
                                }
                                titles.splice(i, 1, name);
                            }
                            else {
                                isConference.unshift(true);
                            }
                        }
                        return {
                            "total": dialogs.count,
                            "total_unread": dialogs.unread_dialogs,
                            "unread": dialogs.items@.unread,
                            "isConference": isConference,
                            "titles": titles,
                            "uids": user_ids,
                            "cids": dialogs.items@.message@.chat_id
                        };"""
            RequestConveyor.add(request, DialogsToken)

            # Wait for response
            waitingForResponse = True
            while waitingForResponse:
                if not DialogsTransfer.empty():
                    waitingForResponse = False
                else:
                    sleep(RequestConveyor.interval)
            self.response = DialogsTransfer.get()
            self.redraw()
            sleep(self.updateInterval)

    def keyboardHandler(self, key):
        if key == curses.KEY_UP:
            if self.pos > 0:
                self.pos -= 1
            elif self.pos == 0 and self.page > 0:
                self.page -=1
                self.pos = self.y - 1
            self.redraw()
        elif key == curses.KEY_DOWN:
            self.pos += (self.pos < self.response['total'])
            if self.pos > self.y - 1:
                self.page += 1
                self.pos = 0
            self.redraw()
        elif key == 0x0A: # Enter key
            self.active = False
            Messages.active = True

    def redraw(self):
        dialogs = self.response # Just to make code more readable
        self.box.erase()

        # Draw header
        self.box.box()
        self.box.addstr(0, 2, "Dialogs: " + str(dialogs['total']), curses.A_BOLD)
        if dialogs['total_unread'] is not None:
            self.box.addstr(" (" + str(dialogs['total_unread']) + ")", self.BOLD_RED)

        # Draw dialogs list
        for i in range(0, self.y):
            # Mark unread dialogs
            self.window.addstr(i, 1, "" if dialogs['unread'][i] is None else
                            "(" + str(dialogs['unread'][i]) + ") ", self.BOLD_RED)
            cy, cx = self.window.getyx()
            # Background for selected dialog
            highlight = curses.A_REVERSE if i == self.pos else 0
            # Bold for conferences
            highlight |= curses.A_BOLD if dialogs['isConference'][i] else 0
            self.window.addnstr(dialogs['titles'][i], self.x - 1 - cx, highlight)
        # TODO: remove debug info
        self.box.addstr(16, 0, str(self.page))
        self.box.addstr(16, 5, str(self.pos))
        self.box.refresh()


class _messages:
    global Dialogs, RequestConveyor, MessagesTransfer
    active = False
    # Every 'updateInterval' seconds ask for update
    updateInterval = 1

    def __init__(self, stdscr):
        # Init window
        y, x = stdscr.getmaxyx()
        self.y = y - 2
        self.x = x - Dialogs.x - 6
        self.box = stdscr.subwin(self.y + 2, self.x + 4, 0, Dialogs.x + 2)
        self.window = self.box.derwin(self.y, self.x, 1, 2)
        self.window.scrollok(True)
        self.BOLD_RED = curses.color_pair(1) | curses.A_BOLD
        # Init message send window
        # self.msgBox = stdscr.subwin(3, 3 * x // 4, 0, x // 4)
        # self.msgWindow = self.msgBox.derwin(1, 3 * x // 4 - 2, 1, 1)

        # Init thread
        self.updater = Thread(None, self.update, "Messages Update Thread")
        self.updater.daemon = True
        self.updater.start()

    def update(self):
        while True:
            try:
                if Dialogs.response:
                    # Selected dialog's id
                    if Dialogs.response['isConference'][Dialogs.pos]:
                        self.active_id = Dialogs.response['cids'][Dialogs.pos] + 2000000000
                    else:
                        self.active_id = Dialogs.response['uids'][Dialogs.pos]
                    # How much messages should be got
                    messagesToGet = 50
                    request = """   var to_id = """ + str(self.active_id) + """;
                                    var  messages = API.messages.getHistory({
                                        "count": """ + str(messagesToGet) + """,
                                        "user_id": to_id,
                                        "v": """ + API_VERSION + """});
                                    var names = API.users.get({
                                        "user_ids": messages.items@.from_id,
                                        "v": """ + API_VERSION + """});
                                    return {
                                        "text": messages.items@.body,
                                        "ids": messages.items@.from_id,
                                        "names": names
                                    }; """
                    RequestConveyor.add(request, MessagesToken)

                    # Wait for response
                    waitingForResponse = True
                    while waitingForResponse:
                        if not MessagesTransfer.empty():
                            waitingForResponse = False
                        else:
                            sleep(RequestConveyor.interval)
                    self.response = MessagesTransfer.get()
                    self.redraw()
            except:
                pass
            sleep(self.updateInterval)

    def send(self):
        curses.echo()
        message = self.msgWindow.getstr(1, 1)
        curses.noecho()
        if message == CMD_EXIT:
            self.active = False
            Dialogs.active = True
            return
        request = """   var to_id = """ + str(self.active_id) + """;
                        API.messages.send({
                            "user_id": to_id,
                            "message": " """ + str(message) + """ ",
                            "v": """ + API_VERSION + """});
                        return 1;"""
        RequestConveyor.add(request, -1)

    def redraw(self):
        messages = self.response # Just to make code more readable
        self.box.erase()
        self.box.box()
        cy = self.y # Row where message would be printed
        for i in range(0, len(messages["text"])):
            if Dialogs.response['isConference'][Dialogs.pos]:
                for _name in messages["names"]:
                    if _name["id"] == messages["ids"][i]:
                        name = _name["first_name"]
                        break
            else:
                name = messages["names"][messages["names"][0]["id"] != messages["ids"][i]]["first_name"]
            msg = str(messages["text"][i])
            cy -= (len(name) + len(msg)) // (self.x - 2) + 1
            try:
                self.window.addstr(cy, 0, name + ": ", self.BOLD_RED)
                self.window.addstr(msg)
            except:
                break
        self.box.refresh()


class _requestConveyor:
    global DialogsTransfer, MessagesTransfer
    RequestQueue = []
    # Make requests every 'interval' seconds
    # VK API limits 3 requests per second
    interval = 0.35

    def __init__(self, api):
        self.api = api
        self.timer = Thread(None, self.call, "Request Conveyor Thread")
        self.timer.daemon = True
        self.timer.start()

    def add(self, request, token):
        self.RequestQueue.append({'request': request, 'token': token})

    def call(self):
        while True:
            if len(self.RequestQueue) > 0:
                try:
                    response = self.api.execute(v = API_VERSION,
                                                code = self.RequestQueue[0]['request'])
                except:
                    pass
                else:
                    if self.RequestQueue[0]['token'] == DialogsToken:
                        DialogsTransfer.put(response)
                    elif self.RequestQueue[0]['token'] == MessagesToken:
                        MessagesTransfer.put(response)
                    self.RequestQueue.pop(0)
            sleep(self.interval)


def auth(stdscr):
    vk.logger.disabled = True
    notLogged = True
    while notLogged:
        # Get login and password
        stdscr.addstr(1, 1, "vmesg " + VERSION)
        stdscr.addstr(3, 1, "Login: ")
        curses.curs_set(1)
        curses.echo()
        vklogin = stdscr.getstr()
        stdscr.addstr(4, 1, "Password: ")
        curses.noecho()
        vkpass = stdscr.getstr()
        curses.curs_set(0)
        stdscr.addstr(6, 1, "Authorizing...")
        stdscr.refresh()

        # Authorization
        try:
            vksession = vk.AuthSession( app_id = APP_ID,
                                        user_login = vklogin,
                                        user_password = vkpass,
                                        scope = 'messages' )
        except vk.exceptions.VkAuthError:
            stdscr.addstr(7, 1, "Incorrect login or password")
        else:
            api = vk.API(vksession)
            try:
                # Just to check if API was initializated succesfully
                stdscr.addstr(7, 1, "Welcome, " + api.account.getProfileInfo(v = API_VERSION)['first_name'])
            except vk.exceptions.VkAPIError:
                stdscr.addstr(7, 1, "Cannot authorize")
            else:
                notLogged = False
        finally:
            stdscr.refresh()
            sleep(1)
            stdscr.clear()
    return api

def keyboardHandler(stdscr):
    global Dialogs, Messages
    while True:
        # Move through dialogs list
        if Dialogs.active:
            key = stdscr.getch()
            Dialogs.keyboardHandler(key)
        else:
            pass
            # Messages.send()


def main(stdscr):
    # Curses setup
    curses.start_color()
    curses.use_default_colors()

    # Authorization
    api = auth(stdscr)

    # Data transfers between threads
    global DialogsTransfer, MessagesTransfer
    DialogsTransfer = Queue()
    MessagesTransfer = Queue()
    # Threads and classes initialization
    global RequestConveyor, Dialogs, Messages
    RequestConveyor = _requestConveyor(api)
    Dialogs = _dialogs(stdscr)
    Messages = _messages(stdscr)

    # Keyboard
    keyboardHandler(stdscr)


def finalizate(signum, frame):
    curses.endwin()
    exit()


if __name__ == "__main__":
    signal(SIGTERM, finalizate)
    signal(SIGINT, finalizate)
    curses.wrapper(main)
