#!/usr/bin/env python3

import curses
import vk
import threading
from time import sleep

_VERSION = 0.1
_APP_ID = 5586370
_API_VERSION = '5.57'


class _dialogs:
    topPos = 0
    active = True

    def __init__(self, stdscr, RequestConveyor):
        self.RequestConveyor = RequestConveyor
        y, x = stdscr.getmaxyx()
        self.box = stdscr.subwin(y, x // 4, 0, 0)
        self.box.box()
        self.window = self.box.derwin(y - 2, x // 4 - 2, 1, 1)

    def update(self):
        request = """   var dialogs = API.messages.getDialogs({"count": 20});
                        return {"total": dialogs.count,
                            "total_unread": dialogs.unread_dialogs,
                            "titles": dialogs.items@.message@.title,
                            "unread": dialogs.items@.unread,
                            "name": API.users.get({"user_ids": dialogs.items@.message@.user_id})};"""
        token = 0
        self.RequestConveyor.add(request, token)
        while self.RequestConveyor.response["token"] != token:
            pass
        dialogs = self.RequestConveyor.response["data"]

        self.box.addstr(0, 2, "Dialogs: " + str(dialogs["total"]), curses.A_BOLD)
        _BOLDRED = curses.color_pair(1) | curses.A_BOLD
        if dialogs["total_unread"] is not None:
            self.box.addstr(" (" + str(dialogs["total_unread"]) + ")", _BOLDRED)

        y, x = self.window.getmaxyx()
        for i in range(0, y):
            # Mark unread dialogs 
            self.window.addstr(i, 1, "" if dialogs["unread"][i] is None else 
                                    "(" + str(dialogs["unread"][i]) + ") ", _BOLDRED)
            cy, cx = self.window.getyx()
            # Get conference titles
            if dialogs["titles"][i] == " ... ":
                self.window.addnstr(dialogs["name"][i]["first_name"] + " " + 
                                    dialogs["name"][i]["last_name"], x - 1 - cx)
            # Get user's names
            else:
                self.window.addnstr(dialogs["titles"][i], x - 1 - cx, curses.A_BOLD)


class _messages:
    active = False

    def __init__(self, stdscr, RequestConveyor):
        self.RequestConveyor = RequestConveyor
        y, x = stdscr.getmaxyx()
        self.box = stdscr.subwin(y, 3 * x // 4, 0, x // 4)
        self.box.box()
        self.window = self.box.derwin(y - 2, 3 * x // 4 - 2, 1, 1)

    def update(self):
        pass


class _requestConveyor:
    queue = []
    response = {}

    def add(self, request, token):
        self.queue.append({'request': request, 'token': token})
    
    def call(self):
        if len(self.queue) > 0:
            self.response.clear()
            self.response = {'data': self.api.execute(v = _API_VERSION, code = self.queue[0]['request']), 
                            'token': self.queue[0]['token']}
            self.queue.pop(0)

    def __init__(self, api):
        # Make requests every 'interval' seconds
        # VK API limits 3 requests per second
        interval = 0.35
        self.api = api
        self.timer = threading.Timer(interval, self.call)
        self.timer.start()


class _updater:
    def update(self):
        self.Dialogs.update()
        self.Messages.update()

    def __init__(self, Dialogs, Messages):
        # Every 'interval' seconds ask for updating
        interval = 1
        self.Dialogs = Dialogs
        self.Messages = Messages
        self.timer = threading.Timer(interval, self.update)
        self.timer.start()


def auth(stdscr):
    vk.logger.disabled = True
    notLogged = True
    while notLogged:
        # Get login and password
        stdscr.addstr(1, 1, "vmesg " + str(_VERSION))
        stdscr.addstr(3, 1, "Login: ")
        curses.curs_set(1)
        curses.echo()
        vklogin = stdscr.getstr()
        stdscr.addstr(4, 1, "Password: ")
        curses.noecho()
        vkpass = stdscr.getstr()
        curses.curs_set(0)
        stdscr.addstr(6, 1, "Authorizing...")
        stdscr.refresh()

        # Authorization
        try:
            vksession = vk.AuthSession( app_id=_APP_ID, 
                                        user_login=vklogin, 
                                        user_password=vkpass, 
                                        scope='messages' )
        except vk.exceptions.VkAuthError:
            stdscr.addstr(7, 1, "Incorrect login or password")
        else:
            api = vk.API(vksession)
            try:
                stdscr.addstr(7, 1, "Welcome, " + api.account.getProfileInfo(v = _API_VERSION)["first_name"])
            except vk.exceptions.VkAPIError:
                stdscr.addstr(7, 1, "Cannot authorize")
            else:
                notLogged = False
        finally:
            stdscr.refresh()
            sleep(1)
            stdscr.clear()
    return api


def finit():
    curses.endwin()


def main(stdscr):
    curses.start_color()
    curses.use_default_colors()
    curses.init_pair(1, curses.COLOR_RED, -1)
    api = auth(stdscr)
    
    RequestConveyor = _requestConveyor(api)
    Dialogs = _dialogs(stdscr, RequestConveyor)
    Messages = _messages(stdscr, RequestConveyor)
    Updater = _updater(Dialogs, Messages)
    
    stdscr.getch()
    finit()

if __name__ == "__main__":
    curses.wrapper(main)
